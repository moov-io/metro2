/*
METRO2 API

Moov Metro2 ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing and validating Metro2 files. Metro2 is an open-source consumer credit history report for credit report file creation and validation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the BaseSegment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseSegment{}

// BaseSegment struct for BaseSegment
type BaseSegment struct {
	BlockDescriptorWord           *int32     `json:"blockDescriptorWord,omitempty"`
	RecordDescriptorWord          int32      `json:"recordDescriptorWord"`
	TimeStamp                     *time.Time `json:"timeStamp,omitempty"`
	IdentificationNumber          string     `json:"identificationNumber"`
	CycleIdentifier               *string    `json:"cycleIdentifier,omitempty"`
	ConsumerAccountNumber         string     `json:"consumerAccountNumber"`
	PortfolioType                 *string    `json:"portfolioType,omitempty"`
	AccountType                   string     `json:"accountType"`
	DateOpened                    *time.Time `json:"dateOpened,omitempty"`
	CreditLimit                   *int32     `json:"creditLimit,omitempty"`
	HighestCredit                 int32      `json:"highestCredit"`
	TermsDuration                 string     `json:"termsDuration"`
	TermsFrequency                *string    `json:"termsFrequency,omitempty"`
	ScheduledMonthlyPaymentAmount *int32     `json:"scheduledMonthlyPaymentAmount,omitempty"`
	ActualPaymentAmount           *int32     `json:"actualPaymentAmount,omitempty"`
	AccountStatus                 string     `json:"accountStatus"`
	PaymentRating                 *string    `json:"paymentRating,omitempty"`
	PaymentHistoryProfile         string     `json:"paymentHistoryProfile"`
	SpecialComment                *string    `json:"specialComment,omitempty"`
	ComplianceConditionCode       *string    `json:"complianceConditionCode,omitempty"`
	CurrentBalance                int32      `json:"currentBalance"`
	AmountPastDue                 *int32     `json:"amountPastDue,omitempty"`
	OriginalChargeOffAmount       *int32     `json:"originalChargeOffAmount,omitempty"`
	DateAccountInformation        time.Time  `json:"dateAccountInformation"`
	DateFirstDelinquency          *time.Time `json:"dateFirstDelinquency,omitempty"`
	DateClosed                    *time.Time `json:"dateClosed,omitempty"`
	DateLastPayment               *time.Time `json:"dateLastPayment,omitempty"`
	InterestTypeIndicator         *string    `json:"interestTypeIndicator,omitempty"`
	Surname                       string     `json:"surname"`
	FirstName                     string     `json:"firstName"`
	MiddleName                    *string    `json:"middleName,omitempty"`
	GenerationCode                *string    `json:"generationCode,omitempty"`
	SocialSecurityNumber          *int32     `json:"socialSecurityNumber,omitempty"`
	DateBirth                     *time.Time `json:"dateBirth,omitempty"`
	TelephoneNumber               *int64     `json:"telephoneNumber,omitempty"`
	EcoaCode                      string     `json:"ecoaCode"`
	ConsumerInformationIndicator  *string    `json:"consumerInformationIndicator,omitempty"`
	CountryCode                   *string    `json:"countryCode,omitempty"`
	FirstLineAddress              string     `json:"firstLineAddress"`
	SecondLineAddress             *string    `json:"secondLineAddress,omitempty"`
	City                          *string    `json:"city,omitempty"`
	State                         string     `json:"state"`
	ZipCode                       string     `json:"zipCode"`
	AddressIndicator              *string    `json:"addressIndicator,omitempty"`
	ResidenceCode                 *string    `json:"residenceCode,omitempty"`
}

// NewBaseSegment instantiates a new BaseSegment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseSegment(recordDescriptorWord int32, identificationNumber string, consumerAccountNumber string, accountType string, highestCredit int32, termsDuration string, accountStatus string, paymentHistoryProfile string, currentBalance int32, dateAccountInformation time.Time, surname string, firstName string, ecoaCode string, firstLineAddress string, state string, zipCode string) *BaseSegment {
	this := BaseSegment{}
	this.RecordDescriptorWord = recordDescriptorWord
	this.IdentificationNumber = identificationNumber
	this.ConsumerAccountNumber = consumerAccountNumber
	this.AccountType = accountType
	this.HighestCredit = highestCredit
	this.TermsDuration = termsDuration
	this.AccountStatus = accountStatus
	this.PaymentHistoryProfile = paymentHistoryProfile
	this.CurrentBalance = currentBalance
	this.DateAccountInformation = dateAccountInformation
	this.Surname = surname
	this.FirstName = firstName
	this.EcoaCode = ecoaCode
	this.FirstLineAddress = firstLineAddress
	this.State = state
	this.ZipCode = zipCode
	return &this
}

// NewBaseSegmentWithDefaults instantiates a new BaseSegment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseSegmentWithDefaults() *BaseSegment {
	this := BaseSegment{}
	return &this
}

// GetBlockDescriptorWord returns the BlockDescriptorWord field value if set, zero value otherwise.
func (o *BaseSegment) GetBlockDescriptorWord() int32 {
	if o == nil || IsNil(o.BlockDescriptorWord) {
		var ret int32
		return ret
	}
	return *o.BlockDescriptorWord
}

// GetBlockDescriptorWordOk returns a tuple with the BlockDescriptorWord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetBlockDescriptorWordOk() (*int32, bool) {
	if o == nil || IsNil(o.BlockDescriptorWord) {
		return nil, false
	}
	return o.BlockDescriptorWord, true
}

// HasBlockDescriptorWord returns a boolean if a field has been set.
func (o *BaseSegment) HasBlockDescriptorWord() bool {
	if o != nil && !IsNil(o.BlockDescriptorWord) {
		return true
	}

	return false
}

// SetBlockDescriptorWord gets a reference to the given int32 and assigns it to the BlockDescriptorWord field.
func (o *BaseSegment) SetBlockDescriptorWord(v int32) {
	o.BlockDescriptorWord = &v
}

// GetRecordDescriptorWord returns the RecordDescriptorWord field value
func (o *BaseSegment) GetRecordDescriptorWord() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RecordDescriptorWord
}

// GetRecordDescriptorWordOk returns a tuple with the RecordDescriptorWord field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetRecordDescriptorWordOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordDescriptorWord, true
}

// SetRecordDescriptorWord sets field value
func (o *BaseSegment) SetRecordDescriptorWord(v int32) {
	o.RecordDescriptorWord = v
}

// GetTimeStamp returns the TimeStamp field value if set, zero value otherwise.
func (o *BaseSegment) GetTimeStamp() time.Time {
	if o == nil || IsNil(o.TimeStamp) {
		var ret time.Time
		return ret
	}
	return *o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetTimeStampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeStamp) {
		return nil, false
	}
	return o.TimeStamp, true
}

// HasTimeStamp returns a boolean if a field has been set.
func (o *BaseSegment) HasTimeStamp() bool {
	if o != nil && !IsNil(o.TimeStamp) {
		return true
	}

	return false
}

// SetTimeStamp gets a reference to the given time.Time and assigns it to the TimeStamp field.
func (o *BaseSegment) SetTimeStamp(v time.Time) {
	o.TimeStamp = &v
}

// GetIdentificationNumber returns the IdentificationNumber field value
func (o *BaseSegment) GetIdentificationNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentificationNumber
}

// GetIdentificationNumberOk returns a tuple with the IdentificationNumber field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetIdentificationNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentificationNumber, true
}

// SetIdentificationNumber sets field value
func (o *BaseSegment) SetIdentificationNumber(v string) {
	o.IdentificationNumber = v
}

// GetCycleIdentifier returns the CycleIdentifier field value if set, zero value otherwise.
func (o *BaseSegment) GetCycleIdentifier() string {
	if o == nil || IsNil(o.CycleIdentifier) {
		var ret string
		return ret
	}
	return *o.CycleIdentifier
}

// GetCycleIdentifierOk returns a tuple with the CycleIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetCycleIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.CycleIdentifier) {
		return nil, false
	}
	return o.CycleIdentifier, true
}

// HasCycleIdentifier returns a boolean if a field has been set.
func (o *BaseSegment) HasCycleIdentifier() bool {
	if o != nil && !IsNil(o.CycleIdentifier) {
		return true
	}

	return false
}

// SetCycleIdentifier gets a reference to the given string and assigns it to the CycleIdentifier field.
func (o *BaseSegment) SetCycleIdentifier(v string) {
	o.CycleIdentifier = &v
}

// GetConsumerAccountNumber returns the ConsumerAccountNumber field value
func (o *BaseSegment) GetConsumerAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsumerAccountNumber
}

// GetConsumerAccountNumberOk returns a tuple with the ConsumerAccountNumber field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetConsumerAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumerAccountNumber, true
}

// SetConsumerAccountNumber sets field value
func (o *BaseSegment) SetConsumerAccountNumber(v string) {
	o.ConsumerAccountNumber = v
}

// GetPortfolioType returns the PortfolioType field value if set, zero value otherwise.
func (o *BaseSegment) GetPortfolioType() string {
	if o == nil || IsNil(o.PortfolioType) {
		var ret string
		return ret
	}
	return *o.PortfolioType
}

// GetPortfolioTypeOk returns a tuple with the PortfolioType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetPortfolioTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PortfolioType) {
		return nil, false
	}
	return o.PortfolioType, true
}

// HasPortfolioType returns a boolean if a field has been set.
func (o *BaseSegment) HasPortfolioType() bool {
	if o != nil && !IsNil(o.PortfolioType) {
		return true
	}

	return false
}

// SetPortfolioType gets a reference to the given string and assigns it to the PortfolioType field.
func (o *BaseSegment) SetPortfolioType(v string) {
	o.PortfolioType = &v
}

// GetAccountType returns the AccountType field value
func (o *BaseSegment) GetAccountType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetAccountTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountType, true
}

// SetAccountType sets field value
func (o *BaseSegment) SetAccountType(v string) {
	o.AccountType = v
}

// GetDateOpened returns the DateOpened field value if set, zero value otherwise.
func (o *BaseSegment) GetDateOpened() time.Time {
	if o == nil || IsNil(o.DateOpened) {
		var ret time.Time
		return ret
	}
	return *o.DateOpened
}

// GetDateOpenedOk returns a tuple with the DateOpened field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetDateOpenedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateOpened) {
		return nil, false
	}
	return o.DateOpened, true
}

// HasDateOpened returns a boolean if a field has been set.
func (o *BaseSegment) HasDateOpened() bool {
	if o != nil && !IsNil(o.DateOpened) {
		return true
	}

	return false
}

// SetDateOpened gets a reference to the given time.Time and assigns it to the DateOpened field.
func (o *BaseSegment) SetDateOpened(v time.Time) {
	o.DateOpened = &v
}

// GetCreditLimit returns the CreditLimit field value if set, zero value otherwise.
func (o *BaseSegment) GetCreditLimit() int32 {
	if o == nil || IsNil(o.CreditLimit) {
		var ret int32
		return ret
	}
	return *o.CreditLimit
}

// GetCreditLimitOk returns a tuple with the CreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetCreditLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.CreditLimit) {
		return nil, false
	}
	return o.CreditLimit, true
}

// HasCreditLimit returns a boolean if a field has been set.
func (o *BaseSegment) HasCreditLimit() bool {
	if o != nil && !IsNil(o.CreditLimit) {
		return true
	}

	return false
}

// SetCreditLimit gets a reference to the given int32 and assigns it to the CreditLimit field.
func (o *BaseSegment) SetCreditLimit(v int32) {
	o.CreditLimit = &v
}

// GetHighestCredit returns the HighestCredit field value
func (o *BaseSegment) GetHighestCredit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HighestCredit
}

// GetHighestCreditOk returns a tuple with the HighestCredit field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetHighestCreditOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HighestCredit, true
}

// SetHighestCredit sets field value
func (o *BaseSegment) SetHighestCredit(v int32) {
	o.HighestCredit = v
}

// GetTermsDuration returns the TermsDuration field value
func (o *BaseSegment) GetTermsDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TermsDuration
}

// GetTermsDurationOk returns a tuple with the TermsDuration field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetTermsDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TermsDuration, true
}

// SetTermsDuration sets field value
func (o *BaseSegment) SetTermsDuration(v string) {
	o.TermsDuration = v
}

// GetTermsFrequency returns the TermsFrequency field value if set, zero value otherwise.
func (o *BaseSegment) GetTermsFrequency() string {
	if o == nil || IsNil(o.TermsFrequency) {
		var ret string
		return ret
	}
	return *o.TermsFrequency
}

// GetTermsFrequencyOk returns a tuple with the TermsFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetTermsFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.TermsFrequency) {
		return nil, false
	}
	return o.TermsFrequency, true
}

// HasTermsFrequency returns a boolean if a field has been set.
func (o *BaseSegment) HasTermsFrequency() bool {
	if o != nil && !IsNil(o.TermsFrequency) {
		return true
	}

	return false
}

// SetTermsFrequency gets a reference to the given string and assigns it to the TermsFrequency field.
func (o *BaseSegment) SetTermsFrequency(v string) {
	o.TermsFrequency = &v
}

// GetScheduledMonthlyPaymentAmount returns the ScheduledMonthlyPaymentAmount field value if set, zero value otherwise.
func (o *BaseSegment) GetScheduledMonthlyPaymentAmount() int32 {
	if o == nil || IsNil(o.ScheduledMonthlyPaymentAmount) {
		var ret int32
		return ret
	}
	return *o.ScheduledMonthlyPaymentAmount
}

// GetScheduledMonthlyPaymentAmountOk returns a tuple with the ScheduledMonthlyPaymentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetScheduledMonthlyPaymentAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.ScheduledMonthlyPaymentAmount) {
		return nil, false
	}
	return o.ScheduledMonthlyPaymentAmount, true
}

// HasScheduledMonthlyPaymentAmount returns a boolean if a field has been set.
func (o *BaseSegment) HasScheduledMonthlyPaymentAmount() bool {
	if o != nil && !IsNil(o.ScheduledMonthlyPaymentAmount) {
		return true
	}

	return false
}

// SetScheduledMonthlyPaymentAmount gets a reference to the given int32 and assigns it to the ScheduledMonthlyPaymentAmount field.
func (o *BaseSegment) SetScheduledMonthlyPaymentAmount(v int32) {
	o.ScheduledMonthlyPaymentAmount = &v
}

// GetActualPaymentAmount returns the ActualPaymentAmount field value if set, zero value otherwise.
func (o *BaseSegment) GetActualPaymentAmount() int32 {
	if o == nil || IsNil(o.ActualPaymentAmount) {
		var ret int32
		return ret
	}
	return *o.ActualPaymentAmount
}

// GetActualPaymentAmountOk returns a tuple with the ActualPaymentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetActualPaymentAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.ActualPaymentAmount) {
		return nil, false
	}
	return o.ActualPaymentAmount, true
}

// HasActualPaymentAmount returns a boolean if a field has been set.
func (o *BaseSegment) HasActualPaymentAmount() bool {
	if o != nil && !IsNil(o.ActualPaymentAmount) {
		return true
	}

	return false
}

// SetActualPaymentAmount gets a reference to the given int32 and assigns it to the ActualPaymentAmount field.
func (o *BaseSegment) SetActualPaymentAmount(v int32) {
	o.ActualPaymentAmount = &v
}

// GetAccountStatus returns the AccountStatus field value
func (o *BaseSegment) GetAccountStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountStatus
}

// GetAccountStatusOk returns a tuple with the AccountStatus field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetAccountStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountStatus, true
}

// SetAccountStatus sets field value
func (o *BaseSegment) SetAccountStatus(v string) {
	o.AccountStatus = v
}

// GetPaymentRating returns the PaymentRating field value if set, zero value otherwise.
func (o *BaseSegment) GetPaymentRating() string {
	if o == nil || IsNil(o.PaymentRating) {
		var ret string
		return ret
	}
	return *o.PaymentRating
}

// GetPaymentRatingOk returns a tuple with the PaymentRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetPaymentRatingOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentRating) {
		return nil, false
	}
	return o.PaymentRating, true
}

// HasPaymentRating returns a boolean if a field has been set.
func (o *BaseSegment) HasPaymentRating() bool {
	if o != nil && !IsNil(o.PaymentRating) {
		return true
	}

	return false
}

// SetPaymentRating gets a reference to the given string and assigns it to the PaymentRating field.
func (o *BaseSegment) SetPaymentRating(v string) {
	o.PaymentRating = &v
}

// GetPaymentHistoryProfile returns the PaymentHistoryProfile field value
func (o *BaseSegment) GetPaymentHistoryProfile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentHistoryProfile
}

// GetPaymentHistoryProfileOk returns a tuple with the PaymentHistoryProfile field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetPaymentHistoryProfileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentHistoryProfile, true
}

// SetPaymentHistoryProfile sets field value
func (o *BaseSegment) SetPaymentHistoryProfile(v string) {
	o.PaymentHistoryProfile = v
}

// GetSpecialComment returns the SpecialComment field value if set, zero value otherwise.
func (o *BaseSegment) GetSpecialComment() string {
	if o == nil || IsNil(o.SpecialComment) {
		var ret string
		return ret
	}
	return *o.SpecialComment
}

// GetSpecialCommentOk returns a tuple with the SpecialComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetSpecialCommentOk() (*string, bool) {
	if o == nil || IsNil(o.SpecialComment) {
		return nil, false
	}
	return o.SpecialComment, true
}

// HasSpecialComment returns a boolean if a field has been set.
func (o *BaseSegment) HasSpecialComment() bool {
	if o != nil && !IsNil(o.SpecialComment) {
		return true
	}

	return false
}

// SetSpecialComment gets a reference to the given string and assigns it to the SpecialComment field.
func (o *BaseSegment) SetSpecialComment(v string) {
	o.SpecialComment = &v
}

// GetComplianceConditionCode returns the ComplianceConditionCode field value if set, zero value otherwise.
func (o *BaseSegment) GetComplianceConditionCode() string {
	if o == nil || IsNil(o.ComplianceConditionCode) {
		var ret string
		return ret
	}
	return *o.ComplianceConditionCode
}

// GetComplianceConditionCodeOk returns a tuple with the ComplianceConditionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetComplianceConditionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ComplianceConditionCode) {
		return nil, false
	}
	return o.ComplianceConditionCode, true
}

// HasComplianceConditionCode returns a boolean if a field has been set.
func (o *BaseSegment) HasComplianceConditionCode() bool {
	if o != nil && !IsNil(o.ComplianceConditionCode) {
		return true
	}

	return false
}

// SetComplianceConditionCode gets a reference to the given string and assigns it to the ComplianceConditionCode field.
func (o *BaseSegment) SetComplianceConditionCode(v string) {
	o.ComplianceConditionCode = &v
}

// GetCurrentBalance returns the CurrentBalance field value
func (o *BaseSegment) GetCurrentBalance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrentBalance
}

// GetCurrentBalanceOk returns a tuple with the CurrentBalance field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetCurrentBalanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentBalance, true
}

// SetCurrentBalance sets field value
func (o *BaseSegment) SetCurrentBalance(v int32) {
	o.CurrentBalance = v
}

// GetAmountPastDue returns the AmountPastDue field value if set, zero value otherwise.
func (o *BaseSegment) GetAmountPastDue() int32 {
	if o == nil || IsNil(o.AmountPastDue) {
		var ret int32
		return ret
	}
	return *o.AmountPastDue
}

// GetAmountPastDueOk returns a tuple with the AmountPastDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetAmountPastDueOk() (*int32, bool) {
	if o == nil || IsNil(o.AmountPastDue) {
		return nil, false
	}
	return o.AmountPastDue, true
}

// HasAmountPastDue returns a boolean if a field has been set.
func (o *BaseSegment) HasAmountPastDue() bool {
	if o != nil && !IsNil(o.AmountPastDue) {
		return true
	}

	return false
}

// SetAmountPastDue gets a reference to the given int32 and assigns it to the AmountPastDue field.
func (o *BaseSegment) SetAmountPastDue(v int32) {
	o.AmountPastDue = &v
}

// GetOriginalChargeOffAmount returns the OriginalChargeOffAmount field value if set, zero value otherwise.
func (o *BaseSegment) GetOriginalChargeOffAmount() int32 {
	if o == nil || IsNil(o.OriginalChargeOffAmount) {
		var ret int32
		return ret
	}
	return *o.OriginalChargeOffAmount
}

// GetOriginalChargeOffAmountOk returns a tuple with the OriginalChargeOffAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetOriginalChargeOffAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginalChargeOffAmount) {
		return nil, false
	}
	return o.OriginalChargeOffAmount, true
}

// HasOriginalChargeOffAmount returns a boolean if a field has been set.
func (o *BaseSegment) HasOriginalChargeOffAmount() bool {
	if o != nil && !IsNil(o.OriginalChargeOffAmount) {
		return true
	}

	return false
}

// SetOriginalChargeOffAmount gets a reference to the given int32 and assigns it to the OriginalChargeOffAmount field.
func (o *BaseSegment) SetOriginalChargeOffAmount(v int32) {
	o.OriginalChargeOffAmount = &v
}

// GetDateAccountInformation returns the DateAccountInformation field value
func (o *BaseSegment) GetDateAccountInformation() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateAccountInformation
}

// GetDateAccountInformationOk returns a tuple with the DateAccountInformation field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetDateAccountInformationOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateAccountInformation, true
}

// SetDateAccountInformation sets field value
func (o *BaseSegment) SetDateAccountInformation(v time.Time) {
	o.DateAccountInformation = v
}

// GetDateFirstDelinquency returns the DateFirstDelinquency field value if set, zero value otherwise.
func (o *BaseSegment) GetDateFirstDelinquency() time.Time {
	if o == nil || IsNil(o.DateFirstDelinquency) {
		var ret time.Time
		return ret
	}
	return *o.DateFirstDelinquency
}

// GetDateFirstDelinquencyOk returns a tuple with the DateFirstDelinquency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetDateFirstDelinquencyOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateFirstDelinquency) {
		return nil, false
	}
	return o.DateFirstDelinquency, true
}

// HasDateFirstDelinquency returns a boolean if a field has been set.
func (o *BaseSegment) HasDateFirstDelinquency() bool {
	if o != nil && !IsNil(o.DateFirstDelinquency) {
		return true
	}

	return false
}

// SetDateFirstDelinquency gets a reference to the given time.Time and assigns it to the DateFirstDelinquency field.
func (o *BaseSegment) SetDateFirstDelinquency(v time.Time) {
	o.DateFirstDelinquency = &v
}

// GetDateClosed returns the DateClosed field value if set, zero value otherwise.
func (o *BaseSegment) GetDateClosed() time.Time {
	if o == nil || IsNil(o.DateClosed) {
		var ret time.Time
		return ret
	}
	return *o.DateClosed
}

// GetDateClosedOk returns a tuple with the DateClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetDateClosedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateClosed) {
		return nil, false
	}
	return o.DateClosed, true
}

// HasDateClosed returns a boolean if a field has been set.
func (o *BaseSegment) HasDateClosed() bool {
	if o != nil && !IsNil(o.DateClosed) {
		return true
	}

	return false
}

// SetDateClosed gets a reference to the given time.Time and assigns it to the DateClosed field.
func (o *BaseSegment) SetDateClosed(v time.Time) {
	o.DateClosed = &v
}

// GetDateLastPayment returns the DateLastPayment field value if set, zero value otherwise.
func (o *BaseSegment) GetDateLastPayment() time.Time {
	if o == nil || IsNil(o.DateLastPayment) {
		var ret time.Time
		return ret
	}
	return *o.DateLastPayment
}

// GetDateLastPaymentOk returns a tuple with the DateLastPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetDateLastPaymentOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateLastPayment) {
		return nil, false
	}
	return o.DateLastPayment, true
}

// HasDateLastPayment returns a boolean if a field has been set.
func (o *BaseSegment) HasDateLastPayment() bool {
	if o != nil && !IsNil(o.DateLastPayment) {
		return true
	}

	return false
}

// SetDateLastPayment gets a reference to the given time.Time and assigns it to the DateLastPayment field.
func (o *BaseSegment) SetDateLastPayment(v time.Time) {
	o.DateLastPayment = &v
}

// GetInterestTypeIndicator returns the InterestTypeIndicator field value if set, zero value otherwise.
func (o *BaseSegment) GetInterestTypeIndicator() string {
	if o == nil || IsNil(o.InterestTypeIndicator) {
		var ret string
		return ret
	}
	return *o.InterestTypeIndicator
}

// GetInterestTypeIndicatorOk returns a tuple with the InterestTypeIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetInterestTypeIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.InterestTypeIndicator) {
		return nil, false
	}
	return o.InterestTypeIndicator, true
}

// HasInterestTypeIndicator returns a boolean if a field has been set.
func (o *BaseSegment) HasInterestTypeIndicator() bool {
	if o != nil && !IsNil(o.InterestTypeIndicator) {
		return true
	}

	return false
}

// SetInterestTypeIndicator gets a reference to the given string and assigns it to the InterestTypeIndicator field.
func (o *BaseSegment) SetInterestTypeIndicator(v string) {
	o.InterestTypeIndicator = &v
}

// GetSurname returns the Surname field value
func (o *BaseSegment) GetSurname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Surname
}

// GetSurnameOk returns a tuple with the Surname field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetSurnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Surname, true
}

// SetSurname sets field value
func (o *BaseSegment) SetSurname(v string) {
	o.Surname = v
}

// GetFirstName returns the FirstName field value
func (o *BaseSegment) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *BaseSegment) SetFirstName(v string) {
	o.FirstName = v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *BaseSegment) GetMiddleName() string {
	if o == nil || IsNil(o.MiddleName) {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetMiddleNameOk() (*string, bool) {
	if o == nil || IsNil(o.MiddleName) {
		return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *BaseSegment) HasMiddleName() bool {
	if o != nil && !IsNil(o.MiddleName) {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *BaseSegment) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetGenerationCode returns the GenerationCode field value if set, zero value otherwise.
func (o *BaseSegment) GetGenerationCode() string {
	if o == nil || IsNil(o.GenerationCode) {
		var ret string
		return ret
	}
	return *o.GenerationCode
}

// GetGenerationCodeOk returns a tuple with the GenerationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetGenerationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GenerationCode) {
		return nil, false
	}
	return o.GenerationCode, true
}

// HasGenerationCode returns a boolean if a field has been set.
func (o *BaseSegment) HasGenerationCode() bool {
	if o != nil && !IsNil(o.GenerationCode) {
		return true
	}

	return false
}

// SetGenerationCode gets a reference to the given string and assigns it to the GenerationCode field.
func (o *BaseSegment) SetGenerationCode(v string) {
	o.GenerationCode = &v
}

// GetSocialSecurityNumber returns the SocialSecurityNumber field value if set, zero value otherwise.
func (o *BaseSegment) GetSocialSecurityNumber() int32 {
	if o == nil || IsNil(o.SocialSecurityNumber) {
		var ret int32
		return ret
	}
	return *o.SocialSecurityNumber
}

// GetSocialSecurityNumberOk returns a tuple with the SocialSecurityNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetSocialSecurityNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.SocialSecurityNumber) {
		return nil, false
	}
	return o.SocialSecurityNumber, true
}

// HasSocialSecurityNumber returns a boolean if a field has been set.
func (o *BaseSegment) HasSocialSecurityNumber() bool {
	if o != nil && !IsNil(o.SocialSecurityNumber) {
		return true
	}

	return false
}

// SetSocialSecurityNumber gets a reference to the given int32 and assigns it to the SocialSecurityNumber field.
func (o *BaseSegment) SetSocialSecurityNumber(v int32) {
	o.SocialSecurityNumber = &v
}

// GetDateBirth returns the DateBirth field value if set, zero value otherwise.
func (o *BaseSegment) GetDateBirth() time.Time {
	if o == nil || IsNil(o.DateBirth) {
		var ret time.Time
		return ret
	}
	return *o.DateBirth
}

// GetDateBirthOk returns a tuple with the DateBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetDateBirthOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateBirth) {
		return nil, false
	}
	return o.DateBirth, true
}

// HasDateBirth returns a boolean if a field has been set.
func (o *BaseSegment) HasDateBirth() bool {
	if o != nil && !IsNil(o.DateBirth) {
		return true
	}

	return false
}

// SetDateBirth gets a reference to the given time.Time and assigns it to the DateBirth field.
func (o *BaseSegment) SetDateBirth(v time.Time) {
	o.DateBirth = &v
}

// GetTelephoneNumber returns the TelephoneNumber field value if set, zero value otherwise.
func (o *BaseSegment) GetTelephoneNumber() int64 {
	if o == nil || IsNil(o.TelephoneNumber) {
		var ret int64
		return ret
	}
	return *o.TelephoneNumber
}

// GetTelephoneNumberOk returns a tuple with the TelephoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetTelephoneNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.TelephoneNumber) {
		return nil, false
	}
	return o.TelephoneNumber, true
}

// HasTelephoneNumber returns a boolean if a field has been set.
func (o *BaseSegment) HasTelephoneNumber() bool {
	if o != nil && !IsNil(o.TelephoneNumber) {
		return true
	}

	return false
}

// SetTelephoneNumber gets a reference to the given int64 and assigns it to the TelephoneNumber field.
func (o *BaseSegment) SetTelephoneNumber(v int64) {
	o.TelephoneNumber = &v
}

// GetEcoaCode returns the EcoaCode field value
func (o *BaseSegment) GetEcoaCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EcoaCode
}

// GetEcoaCodeOk returns a tuple with the EcoaCode field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetEcoaCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EcoaCode, true
}

// SetEcoaCode sets field value
func (o *BaseSegment) SetEcoaCode(v string) {
	o.EcoaCode = v
}

// GetConsumerInformationIndicator returns the ConsumerInformationIndicator field value if set, zero value otherwise.
func (o *BaseSegment) GetConsumerInformationIndicator() string {
	if o == nil || IsNil(o.ConsumerInformationIndicator) {
		var ret string
		return ret
	}
	return *o.ConsumerInformationIndicator
}

// GetConsumerInformationIndicatorOk returns a tuple with the ConsumerInformationIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetConsumerInformationIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.ConsumerInformationIndicator) {
		return nil, false
	}
	return o.ConsumerInformationIndicator, true
}

// HasConsumerInformationIndicator returns a boolean if a field has been set.
func (o *BaseSegment) HasConsumerInformationIndicator() bool {
	if o != nil && !IsNil(o.ConsumerInformationIndicator) {
		return true
	}

	return false
}

// SetConsumerInformationIndicator gets a reference to the given string and assigns it to the ConsumerInformationIndicator field.
func (o *BaseSegment) SetConsumerInformationIndicator(v string) {
	o.ConsumerInformationIndicator = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *BaseSegment) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *BaseSegment) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *BaseSegment) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetFirstLineAddress returns the FirstLineAddress field value
func (o *BaseSegment) GetFirstLineAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstLineAddress
}

// GetFirstLineAddressOk returns a tuple with the FirstLineAddress field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetFirstLineAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstLineAddress, true
}

// SetFirstLineAddress sets field value
func (o *BaseSegment) SetFirstLineAddress(v string) {
	o.FirstLineAddress = v
}

// GetSecondLineAddress returns the SecondLineAddress field value if set, zero value otherwise.
func (o *BaseSegment) GetSecondLineAddress() string {
	if o == nil || IsNil(o.SecondLineAddress) {
		var ret string
		return ret
	}
	return *o.SecondLineAddress
}

// GetSecondLineAddressOk returns a tuple with the SecondLineAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetSecondLineAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SecondLineAddress) {
		return nil, false
	}
	return o.SecondLineAddress, true
}

// HasSecondLineAddress returns a boolean if a field has been set.
func (o *BaseSegment) HasSecondLineAddress() bool {
	if o != nil && !IsNil(o.SecondLineAddress) {
		return true
	}

	return false
}

// SetSecondLineAddress gets a reference to the given string and assigns it to the SecondLineAddress field.
func (o *BaseSegment) SetSecondLineAddress(v string) {
	o.SecondLineAddress = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *BaseSegment) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *BaseSegment) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *BaseSegment) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value
func (o *BaseSegment) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *BaseSegment) SetState(v string) {
	o.State = v
}

// GetZipCode returns the ZipCode field value
func (o *BaseSegment) GetZipCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetZipCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZipCode, true
}

// SetZipCode sets field value
func (o *BaseSegment) SetZipCode(v string) {
	o.ZipCode = v
}

// GetAddressIndicator returns the AddressIndicator field value if set, zero value otherwise.
func (o *BaseSegment) GetAddressIndicator() string {
	if o == nil || IsNil(o.AddressIndicator) {
		var ret string
		return ret
	}
	return *o.AddressIndicator
}

// GetAddressIndicatorOk returns a tuple with the AddressIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetAddressIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.AddressIndicator) {
		return nil, false
	}
	return o.AddressIndicator, true
}

// HasAddressIndicator returns a boolean if a field has been set.
func (o *BaseSegment) HasAddressIndicator() bool {
	if o != nil && !IsNil(o.AddressIndicator) {
		return true
	}

	return false
}

// SetAddressIndicator gets a reference to the given string and assigns it to the AddressIndicator field.
func (o *BaseSegment) SetAddressIndicator(v string) {
	o.AddressIndicator = &v
}

// GetResidenceCode returns the ResidenceCode field value if set, zero value otherwise.
func (o *BaseSegment) GetResidenceCode() string {
	if o == nil || IsNil(o.ResidenceCode) {
		var ret string
		return ret
	}
	return *o.ResidenceCode
}

// GetResidenceCodeOk returns a tuple with the ResidenceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSegment) GetResidenceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ResidenceCode) {
		return nil, false
	}
	return o.ResidenceCode, true
}

// HasResidenceCode returns a boolean if a field has been set.
func (o *BaseSegment) HasResidenceCode() bool {
	if o != nil && !IsNil(o.ResidenceCode) {
		return true
	}

	return false
}

// SetResidenceCode gets a reference to the given string and assigns it to the ResidenceCode field.
func (o *BaseSegment) SetResidenceCode(v string) {
	o.ResidenceCode = &v
}

func (o BaseSegment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseSegment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockDescriptorWord) {
		toSerialize["blockDescriptorWord"] = o.BlockDescriptorWord
	}
	toSerialize["recordDescriptorWord"] = o.RecordDescriptorWord
	if !IsNil(o.TimeStamp) {
		toSerialize["timeStamp"] = o.TimeStamp
	}
	toSerialize["identificationNumber"] = o.IdentificationNumber
	if !IsNil(o.CycleIdentifier) {
		toSerialize["cycleIdentifier"] = o.CycleIdentifier
	}
	toSerialize["consumerAccountNumber"] = o.ConsumerAccountNumber
	if !IsNil(o.PortfolioType) {
		toSerialize["portfolioType"] = o.PortfolioType
	}
	toSerialize["accountType"] = o.AccountType
	if !IsNil(o.DateOpened) {
		toSerialize["dateOpened"] = o.DateOpened
	}
	if !IsNil(o.CreditLimit) {
		toSerialize["creditLimit"] = o.CreditLimit
	}
	toSerialize["highestCredit"] = o.HighestCredit
	toSerialize["termsDuration"] = o.TermsDuration
	if !IsNil(o.TermsFrequency) {
		toSerialize["termsFrequency"] = o.TermsFrequency
	}
	if !IsNil(o.ScheduledMonthlyPaymentAmount) {
		toSerialize["scheduledMonthlyPaymentAmount"] = o.ScheduledMonthlyPaymentAmount
	}
	if !IsNil(o.ActualPaymentAmount) {
		toSerialize["actualPaymentAmount"] = o.ActualPaymentAmount
	}
	toSerialize["accountStatus"] = o.AccountStatus
	if !IsNil(o.PaymentRating) {
		toSerialize["paymentRating"] = o.PaymentRating
	}
	toSerialize["paymentHistoryProfile"] = o.PaymentHistoryProfile
	if !IsNil(o.SpecialComment) {
		toSerialize["specialComment"] = o.SpecialComment
	}
	if !IsNil(o.ComplianceConditionCode) {
		toSerialize["complianceConditionCode"] = o.ComplianceConditionCode
	}
	toSerialize["currentBalance"] = o.CurrentBalance
	if !IsNil(o.AmountPastDue) {
		toSerialize["amountPastDue"] = o.AmountPastDue
	}
	if !IsNil(o.OriginalChargeOffAmount) {
		toSerialize["originalChargeOffAmount"] = o.OriginalChargeOffAmount
	}
	toSerialize["dateAccountInformation"] = o.DateAccountInformation
	if !IsNil(o.DateFirstDelinquency) {
		toSerialize["dateFirstDelinquency"] = o.DateFirstDelinquency
	}
	if !IsNil(o.DateClosed) {
		toSerialize["dateClosed"] = o.DateClosed
	}
	if !IsNil(o.DateLastPayment) {
		toSerialize["dateLastPayment"] = o.DateLastPayment
	}
	if !IsNil(o.InterestTypeIndicator) {
		toSerialize["interestTypeIndicator"] = o.InterestTypeIndicator
	}
	toSerialize["surname"] = o.Surname
	toSerialize["firstName"] = o.FirstName
	if !IsNil(o.MiddleName) {
		toSerialize["middleName"] = o.MiddleName
	}
	if !IsNil(o.GenerationCode) {
		toSerialize["generationCode"] = o.GenerationCode
	}
	if !IsNil(o.SocialSecurityNumber) {
		toSerialize["socialSecurityNumber"] = o.SocialSecurityNumber
	}
	if !IsNil(o.DateBirth) {
		toSerialize["dateBirth"] = o.DateBirth
	}
	if !IsNil(o.TelephoneNumber) {
		toSerialize["telephoneNumber"] = o.TelephoneNumber
	}
	toSerialize["ecoaCode"] = o.EcoaCode
	if !IsNil(o.ConsumerInformationIndicator) {
		toSerialize["consumerInformationIndicator"] = o.ConsumerInformationIndicator
	}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	toSerialize["firstLineAddress"] = o.FirstLineAddress
	if !IsNil(o.SecondLineAddress) {
		toSerialize["secondLineAddress"] = o.SecondLineAddress
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	toSerialize["state"] = o.State
	toSerialize["zipCode"] = o.ZipCode
	if !IsNil(o.AddressIndicator) {
		toSerialize["addressIndicator"] = o.AddressIndicator
	}
	if !IsNil(o.ResidenceCode) {
		toSerialize["residenceCode"] = o.ResidenceCode
	}
	return toSerialize, nil
}

type NullableBaseSegment struct {
	value *BaseSegment
	isSet bool
}

func (v NullableBaseSegment) Get() *BaseSegment {
	return v.value
}

func (v *NullableBaseSegment) Set(val *BaseSegment) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseSegment) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseSegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseSegment(val *BaseSegment) *NullableBaseSegment {
	return &NullableBaseSegment{value: val, isSet: true}
}

func (v NullableBaseSegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseSegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
